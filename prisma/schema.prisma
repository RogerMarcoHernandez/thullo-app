// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Card {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  listId      String    @db.ObjectId
  boardId     String    @db.ObjectId
  dueDate     DateTime?
  labels      String[]
  memberIDs   String[]  @db.ObjectId
  attachments String[]
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  list    List   @relation(fields: [listId], references: [id])
  board   Board  @relation(fields: [boardId], references: [id])
  members User[] @relation(fields: [memberIDs], references: [id])
}

model List {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  boardId   String   @db.ObjectId
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  board Board @relation(fields: [boardId], references: [id])
}

model Board {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  userId      String   @db.ObjectId
  lists       List[]
  cards       Card[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cardId    String   @db.ObjectId
  userId    String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  card Card @relation(fields: [cardId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?   @unique
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  boards        Board[]
  comments      Comment[]
  cardIds       String[]  @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  cards Card[] @relation(fields: [cardIds], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
